name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    # prevents this action from running on forks
    if: github.repository == 'kucrut/catatan'
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2.2.2
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - run: pnpm install --frozen-lockfile --silent
      - run: pnpm build

      - id: get_version
        shell: bash
        run: |
          VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          echo "::set-output name=package_version::$VERSION"

      - name: Create release pull request
        id: changesets
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update plugin version
        shell: bash
        if: steps.create_version_pr.outputs.hasChangesets != 'false'
        run: |
          NEW_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          sed -i -E "s#(Version:[ ]+).*\$#\1${NEW_VERSION}#" plugin.php
          git add plugin.php
          git commit -m "Bump plugin version -> ${NEW_VERSION}"
          git push

  check_new_version:
    name: Check new version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: get_version
        name: Check if there's a new version
        shell: bash
        run: |
          if [[ `git rev-parse @^:CHANGELOG.md` = `git rev-parse @:CHANGELOG.md` ]]; then
            NEW_VERSION=''
          else
            NEW_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          fi

          echo "::set-output name=new_version::$NEW_VERSION"

  publish:
    name: Publish new version
    runs-on: ubuntu-latest
    needs: [check_new_version]
    if: needs.check_new_version.outputs.new_version != ''
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Build assets
        run: |
          npm install
          npm run build

      - name: Create tag
        uses: EndBug/add-and-commit@v9
        with:
          add: "--force app/dist"
          tag: ${{ needs.check_new_version.outputs.new_version }}
          push: "--tags"
